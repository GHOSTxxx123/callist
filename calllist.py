# -*- coding: utf-8 -*- #Данная строка помогла мне исправить ошибку с кодировкой
from openpyxl import load_workbook, Workbook # импортирую библиотеку openpyxl для работы с таблицами .xlsx и из неё импоритрую 2 модуля для загрузки и создания таблиц 
import os # импортирую библиотеку os для проверки существования файла базы данных

if not os.path.exists("data-base.xlsx"): # проверка на существование файла базы данных
    wb1 = Workbook()
    wa1 = wb1.active
    wa1.cell(row=1, column=1).value = "qwe"
    wb1.save("data-base.xlsx") # Создаю и сохраняю базу данных в формате .xlsx, добовляю в самую первую клетку не осмысленный текст чтобы обойти ошибку с прочитывание файла у load_workbook

wb = load_workbook("data-base.xlsx") # читаю уже существующую базу даннх
ws = wb.active # показываю что будет редактироваться именно активная таблица
def selectMode(): # функция выбор режима для выбора режима)
    print("Выберите режим:\n1. Редактирование\n2. Просмотр\n(1/2)\n")
    while True:
        answer = input("")
        if answer != "1" and answer!= "2":
            print("Пожалуйста напишите '1' для редактирования записной книги, и '2' для просмотра все существующих контактов в ней.")
        else:
            break
        # выше я проверяю чтобы текст написанный пользователем совпадал с предоставленными вариантами
    if answer == '1':
        edit()
    else:
        view()

def edit():#функция редактирования
    print("Выберите действие:\n1. Удалить существующие контакты\n2. Редактировать существующие контакты\n3. Создать новые контакты\n(1/2/3)\n4. Выйти назад")
    while True:
        answer = input("")
        if answer != "1" and answer != "2" and answer != "3" and answer != "4":
            print("Пожалуйста напишите '1' для удаления уже имеющихся контактов, '2' для редактирования уже имеющихся контактов, '3' для создания новых контактов")
        else:
            break
        # выше я проверяю чтобы текст написанный пользователем совпадал с предоставленными вариантами
    if answer == "1":
        editDelete()
    elif answer == "2":
        editEdit()
    elif answer == "3":
        editCreate()
    elif answer == "4":
        selectMode()


def editEdit(): #функция для редактирования контактов
    questions = ['Введите имя контакта: (Обязательно)','Введите фамилию контакта: (Не обязательно)', 'Введите отчество контакта: (Не обязательно)', 'Введите рабочий номер телефона контакта: (Обязательно)', 'Введите личный номер телефона контакта: (Не обязательно)', 'Ввдетие название организации: (Обязательно)']
    print("Перед использование данной функции советую заранее зайти в файл 'data-base.xlsx' и посмотреть какюу строку вы собираетесь редактировать")
    print("Введите номер строки для редактирования")
    while True:
        rowEdit = input("")
        if rowEdit.isdigit():
            break
        else:
            print("Пожалуйста не используйте буквы в номере строки, напишите только число.")
        # выше я проверяю чтобы текст написанный пользователем можно было преобразовать в число
    print('Сейчас вы будете перебирать параметры и в случае если вам нужно заменить какой либо параметр напишите новое значение для него,\nа если вам не нужно его заменять просто оставьте пустую строку')
    for i in questions:
        print(i + "\n")
        answer = input("")
        if answer == "":
            pass
        else:
            numInColumn = 0
            for b in questions:
                if b == i:
                    break
                else:
                    numInColumn += 1
            numInColumn += 1
            ws.cell(row=int(rowEdit), column=numInColumn).value = answer
            wb.save("data-base.xlsx")
            #Сначала вывожу пользователю текст из масива question и в случае если он оставляет строку пустой она не редактируеться, а в ином случае перебираю масив и ищю одинковое слово на которое пользователь пожелал заменить значение и меняю его 
    print("Контакт успешно изменен!")
    edit()

def editDelete(): # функция для удаления контактов
    print("Перед использование данной функции советую заранее зайти в файл 'data-base.xlsx' и посмотреть какюу строку вы собираетесь Удалять")
    print("Данная функция удаляет строку без возможности востановления в программе,\nнапишите '1' чтобы продолжить,\nИ '2' чтобы выйти.")
    while True:
        verify = input("")
        if verify != "1" and verify != "2":
            print("Пожалуйста напишите '1' если вы понимаете и принимаете, то факт что удаленная вами строчка не будет иметь возможности востановления в этой программе,\nИ '2' если вы хотите вернуться назад.")
        else: break
    # выше я проверяю чтобы текст написанный пользователем совпадал с предоставленными вариантами
    if verify == "2":
        edit() 
    print("Введите номер строки для удаления")
    while True:
        rowDelete = input("")
        if rowDelete.isdigit():
            break
        else:
            print("Пожалуйста не используйте буквы в номере строки, напишите только число.")
    # выше я проверяю чтобы текст написанный пользователем можно было преобразовать в число
    for i in range(0, 6):
        buffer = i
        buffer += 1
        ws.cell(row=int(rowDelete), column=buffer).value = "Удаленна"
        wb.save("data-base.xlsx")
    print("Контакт успешно удален!")
    edit()
        #выше я беру строку которую хотел удалть пользователь и меняю на ней все 6 параметов на удаленно
    
        

def editCreate(): # функция для создания контактов
    questions = ['Введите имя контакта: (Обязательно)','Введите фамилию контакта: (Не обязательно)', 'Введите отчество контакта: (Не обязательно)', 'Введите рабочий номер телефона контакта: (Обязательно)', 'Введите личный номер телефона контакта: (Не обязательно)', 'Ввдетие название организации: (Обязательно)']
    rowCheck = 1
    while True:
        if ws.cell(row=rowCheck, column=1).value == None:
            break
        else:
            rowCheck += 1
    # Перебираю строки и ищю пока попадуться пустые строки которые вернут мне None это будет значить что в них можно будет внести параметры
    for i in questions:
        print(i + "\n")
        while True:
            answer = input("")
            if i.find("обязательно") and answer == "":
                print("Данный параметр являетсья обязательным, пожалуйста заполните данную строку.")
            else:
                break
        # Получаю у пользователя данные для заполнения параметов и если параметры не обязательные пользователь может их пропустить
        numInColumn = 0
        for b in questions:
            if b == i:
                break
            else:
                numInColumn += 1
        numInColumn += 1
        ws.cell(row=rowCheck, column=numInColumn).value = answer
        wb.save("data-base.xlsx")
        print("Контакт успешно создан!")
    edit()
        # Перебираю масив с вопросами и сам вопрос нахожу сходство полчаю индекс и по индексу при добовление единицы, заменяю их в базе данных, единицу добовляю для из за того что индексы у масивов начинаютсья с 0 а в таблице нету 0 все начинаеться с 1
                

def view(): # функция просмотра контактов
    print("Перед использование данной функции советую заранее зайти в файл 'data-base.xlsx' и посмотреть какюу строку вы собираетесь просматривать")
    print("Напишите номер строки для просмотра")
    while True:
        rowView = input("")
        if rowView.isdigit():
            break
        else:
            print("Пожалуйста не используйте буквы в номере строки, напишите только число.")
    # выше я проверяю чтобы текст написанный пользователем можно было преобразовать в число
    if ws.cell(row=int(rowView), column=1).value == None:
        print("Данная строка пустая!")
        selectMode()
    elif ws.cell(row=int(rowView), column=1).value == "Удаленна":
        print("Данная строка удалена!")
        selectMode()
    # В случае если строка которую захотел просмотреть пользователь пустая или удаленная, оповещаю его об этом и возвращаю назад
    info = ['Имя', "Фамилия", "Отчество", "Рабочий номер телефона", "Личный номер телефона", "Название организации"]
    for i in range(0, 6):
        buffer = i
        buffer += 1
        print(info[i] + ": " + ws.cell(row=int(rowView), column=buffer).value)
    selectMode()
    # Беру значения из базы данных и подстовляю текст по индексу, также добовляю еденицу через буферную переменную так как в питоне индексы у масивов начинаються с 0 а в таблице нет 0 все начинаеться с 1

if __name__ == "__main__":
    selectMode()
# запускаю программу

# забилдил программу через pyinstaller команда "pyinstaller -F calllist.py" установка библиотеки через терминал"pip install pyinstaller"
# библиотека для работы с таблицами "pip install openpyxl"
# библиотека os встроенная и не нуждаеться в установке
# все выше находящееся было написанно на версии python 3.9.10 64-bit
# название получилось не очень calllist типо call и list список звонков...